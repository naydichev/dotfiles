#!/usr/bin/python

import argparse
import glob
import inspect
import os.path
import re
import sys

from math import ceil

class color:
    reset = '\033[m'
    episode = '\033[1;36m\033[45m'
    title = '\033[1;30m\033[47m'
    season = '\033[0m'
    show = '\033[32m'

class Shows:

    def __init__(self, options={}):
        self.options = {
            "debug": False,
            "verbose": False,
            "force": False,
            "listAllEpisodes": True,
            "showlistFilename": ".showlist",
            "showlistFilepath": "",
            "showPath": os.path.join("/opt", "media", "TV", ""),
            "showCriteria": "Season*"
        }

        self.options["showlistFilepath"] = os.path.expanduser(
            "~/{}".format(self.options["showlistFilename"])
        )

        # update with whatever we got
        self.options.update(options)

        # inits
        self.skipLead = False

        # build the showList (we'll probably need it)
        self.buildShowList()

        # read the showlist file
        self.buildWatchingList()


    def debug(self, message, newline=True):
        if self.options.get("debug"):
            nl = ""

            func = inspect.stack()[1][3]
            if newline:
                nl = "\n"
            sys.stderr.write("D| {}${}{}".format(func, message, nl))

    def verbose(self, message, newline=True):
        if self.options.get("verbose"):
            nl = ""

            if newline:
                nl = "\n"
                self.skipLead = True

            lead = "V|"
            if self.skipLead:
                lead = ""
                self.skipLead = False

            sys.stderr.write("{} {}{}".format(lead, message, nl))

    def getShowFromPath(self, path):
        strLen = len(self.options.get("showPath"))
        trimmed = path[(path.find(self.options.get("showPath")) + strLen):]
        show, season = trimmed.split(os.path.sep)
        self.debug("{}, {}, {}".format(self.options.get("showPath"), path, show))

        self.debug("show: {}".format(show))

        return show, season

    def buildShowList(self):
        if not self.options.get("showPath") or not self.options.get("showCriteria"):
            raise ValueError("showPath and showCriteria are mandatory")

        self.debug("called buildShowList")

        seasonPath = "{}*/{}".format(
            self.options.get("showPath"),
            self.options.get("showCriteria")
        )

        self.debug("seasonPath: {}".format(seasonPath))

        shows = {}

        # self.debug("seasonPath: {}".format(seasonPath))
        seasonFolders = glob.glob(seasonPath)

        # self.debug(seasonFolders)

        for season_folder in seasonFolders:

            show, season = self.getShowFromPath(season_folder)

            self.verbose("probing {}{} ->".format(show, season_folder), False)

            if not shows.get(show):
                shows[show] = {}

            if not shows.get(show).get(season):
                shows[show][season] = []

            shows[show][season].extend(self.listEpisodesForSeasonPath(season_folder))
            self.verbose("found {} episodes".format(len(shows[show])))


        self.shows = {k: shows[k] for k in shows.keys() if len(shows[k]) > 0}

    def buildWatchingList(self):
        shows = []

        if not self.options.get("showlistFilepath"):
            raise ValueError("showlistFilepath is mandatory")

        try:
            with open(self.options.get("showlistFilepath"), "r") as _f:
                for show in _f.read().split("\n"):
                    if len(show) == 0:
                        continue

                    shows.append(show)
        except IOError:
            # no file? meh, no biggie.
            pass

        self.watching = shows

    def listEpisodesForSeasonPath(self, seasonPath):
        episodes = []

        seasonPath = "{}/*".format(seasonPath)
        # self.debug("seasonPath {}".format(seasonPath))

        episodesPath = glob.glob(seasonPath)
        # self.debug(episodesPath)

        for episode_path in episodesPath:
            episodes.append(episode_path.split(os.path.sep)[-1])

        return sorted(episodes)

    def printAllShows(self):

        # we're gonna print everything
        
        shows = self.shows.copy()

        for show in self.watching:
            if not shows.get(show):
                shows[show] = {}

        self.printFound(shows)


    def printFound(self, shows=None):
        if not shows:
            shows = self.shows

        for show in self.shows.keys():
            print "{}{}{}".format(color.show, show, color.reset)

            if self.options.get("listAllEpisodes"):
                self.printEpisodes(show)

    def printEpisodes(self, show):

        def getIdx(current, columns, rows):
            return current % rows

        if not self.shows.get(show):
            raise ValueError(show + " does not exist")

        regex = re.compile('S\d+([\dE]+)\s+-\s+(.*)$')
        for season in sorted(self.shows.get(show).keys()):
            episodes = map(lambda z: regex.search(z).groups(), [x.split('.')[:-1][0] for x in sorted(self.shows.get(show).get(season))])

            if len(episodes) == 0:
                break

            print " > {}{}{}".format(color.season, season, color.reset)

            lengths = [max(len(str(x)) for x in ep) + 2 for ep in zip(*episodes)] # the '2' is for spaces
            COL_CNT = (238 / (sum(lengths) + 25)) + 1 # the ten is for a buffer, the one for a minimum
            rows = int(ceil(len(episodes) * 1.0 / COL_CNT))
            # print "rows {} | len(episodes) {} | COL_CNT {} | lengths {}".format(rows, len(episodes), COL_CNT, lengths)

            columns = {}

            for i in range(0, len(episodes)):
                episode = episodes[i]
                idx = getIdx(i, COL_CNT, rows)

                c = columns.get(idx, [])
                c.append("{padding}{episode_color}{episode}{reset} {title_color}{title}{reset}".format(
                    padding = " " * 3,
                    episode = episode[0].ljust(lengths[0]),
                    title = episode[1].ljust(lengths[1]),
                    episode_color = color.episode,
                    title_color = color.title,
                    reset = color.reset)
                )
                columns[idx] = c



            for c in sorted(columns.keys()):
                print " ".join(columns.get(c))

    def printUnwatched(self):

        unwatched = self.genUnwatched()

        for show in unwatched:
            print "{}{}{}".format(color.show, show, color.reset)

            if self.options.get("listAllEpisodes"):
                self.printEpisodes(show)

    def purgeUnwatched(self):

        if not self.options.get("showCriteria"):
            raise ValueError("showCriteria is mandatory")

        unwatched = self.genUnwatched()

        season_prefix = self.options.get("showCriteria").replace("*", "")

        for show in unwatched:
            for season in sorted(self.shows.get(show).keys()):
                season_path = os.path.join(self.options["showPath"], show, season)
                episodes = sorted(self.shows.get(show).get(season))
                for episode in episodes:
                    episode_path = os.path.join(season_path, episode)

                    resp = "n"
                    if not self.options.get("force"):
                        resp = raw_input("Delete {} ? (y/N): ".format(episode_path))
                    else:
                        resp = "y"

                    if resp.lower() == "y":
                        self.deleteFile(episode_path)

                        self.shows[show].remove(episode)

                if len(episodes) == 0:
                    self.deleteEmptyDirectory(season_path)

    def deleteFile(self, episode_path):
        os.remove(episode_path)

    def deleteEmptyDirectory(self, season_path):
        os.rmdir(season_path)

    def genUnwatched(self):
        unwatched = []

        for show in self.shows.keys():
            if show not in self.watching:
                unwatched.append(show)

        return unwatched

    def addWatchedShow(self, shows):
        self.watching.extend(shows)

        self.saveWatchingList()

    def addFoundShows(self):
        self.watching.extend(self.shows.keys())

        self.saveWatchingList()

    def saveWatchingList(self):
        with open(self.options.get("showlistFilepath"), "w") as _f:

            self.watching = list(set(self.watching))
            self.debug("writing {}".format(self.watching))
            showsStr = "\n".join(sorted(self.watching))

            _f.write(showsStr + "\n")

            self.verbose("wrote watching list")

def main():

    options = { "verbose": False, "debug": False }
    parser = argparse.ArgumentParser()

    _file_name = ".showlist"
    # the following are mutually exclusive, in case the function call didn't give it away
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-A", "--add-all-shows", help="Add all shows found to {}".format(_file_name), action="store_true")
    group.add_argument("-a", "--add-show", help="Add a show to the list in {}".format(_file_name), nargs="*", action="append")
    group.add_argument("-l", "--list-shows", help="List all shows (including those listed in {})".format(_file_name), action="store_true")
    group.add_argument("-p", "--purge", help="Remove shows", action="store_true")

    # oh, and some other stuff
    parser.add_argument("-n", "--no-list-episodes", help="Only list shows, not episodes", action="store_true")
    parser.add_argument("-f", "--force", help="Used with -p, does not prompt you to delete each episode.", action="store_true")
    parser.add_argument("-v", "--verbose", help="Verbose Output", action="store_true")
    parser.add_argument("-d", "--debug", help="Debug Output", action="store_true")

    args = parser.parse_args()

    if args.verbose:
        options["verbose"] = True

    if args.no_list_episodes:
        options["listAllEpisodes"] = False

    if args.force:
        options["force"] = True

    if args.debug:
        options["debug"] = True

    if options["debug"]:
        print args

    shows = Shows(options)

    if args.add_show:
        shows.addWatchedShow([el for elements in args.add_show for el in elements])
    elif args.add_all_shows:
        shows.addFoundShows()
    elif args.list_shows:
        shows.printAllShows()
    elif args.purge:
        shows.purgeUnwatched()
    else:
        shows.printUnwatched()

if __name__ == "__main__":
    main()
